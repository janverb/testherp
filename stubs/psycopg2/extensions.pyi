from typing import Any, List, Optional, Sequence, Tuple, Union

from psycopg2 import sql

ISOLATION_LEVEL_AUTOCOMMIT = 1

class connection:
    closed: int
    def cursor(self) -> cursor: ...
    def close(self) -> None: ...
    def set_isolation_level(self, level: int) -> None: ...

class cursor:
    closed: bool
    rowcount: int
    rownumber: int
    def close(self) -> None: ...
    # .execute() can take a str too, but let's enforce the typed interface
    def execute(
        self, query: sql.Composable, vars: Optional[Sequence[Any]] = None
    ) -> None: ...
    def fetchone(self) -> Tuple[Any, ...]: ...
    def fetchall(self) -> List[Tuple[Any, ...]]: ...
    def __enter__(self) -> cursor: ...
    def __exit__(self, typ: Any, value: Any, tb: Any) -> None: ...
