from typing import List, Sequence, Union

from psycopg2.extensions import cursor, connection

class Composable:
    def as_string(self, context: Union[cursor, connection]) -> str: ...
    def __add__(self, other: Composable) -> Composed: ...
    def __mul__(self, n: int) -> Composed: ...

class SQL(Composable):
    def __init__(self, string: str) -> None: ...
    def format(self, *values: Identifier) -> Composed: ...

class Identifier(Composable):
    def __init__(self, *strings: str) -> None: ...

class Composed(Composable):
    def __init__(self, seq: Sequence[Composable]) -> None: ...
    seq: List[Composable]
